// Copyright (c) 2018-2021 by Rob Norris
// This software is licensed under the MIT License (MIT).
// For more information see LICENSE or https://opensource.org/licenses/MIT

package tests.postgis.ewkb

import cats.syntax.all._
import scodec.bits._
import skunk.postgis._

class EWKBTest extends munit.FunSuite {

  ewkbTest("POINT(1 2)")(
    hex"0101000000000000000000F03F0000000000000040",
    Point.xy(1, 2)
  )

  ewkbTest("POINT(1 2 3)")(
    hex"0101000080000000000000F03F00000000000000400000000000000840",
    Point.xyz(1, 2, 3)
  )

  ewkbTest("POINT M(1 2 3)")(
    hex"0101000040000000000000F03F00000000000000400000000000000840",
    Point.xym(1, 2, 3)
  )

  ewkbTest("POINT (1 2 3 4)")(
    hex"01010000C0000000000000F03F000000000000004000000000000008400000000000001040",
    Point.xyzm(1, 2, 3, 4)
  )

  ewkbTest("SRID=32632;POINT(1 2)")(
    hex"0101000020787F0000000000000000F03F0000000000000040",
    Point(SRID(32632), Coordinate.xy(1, 2))
  )

  ewkbTest("SRID=4326;POINT M(1 2 3)")(
    hex"0101000060E6100000000000000000F03F00000000000000400000000000000840",
    Point(SRID(4326), Coordinate.xym(1, 2, 3))
  )

  ewkbTest("LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)")(
    hex"010200000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540",
    LineString(
      Coordinate.xy(-71.160281, 42.258729),
      Coordinate.xy(-71.160837, 42.259113),
      Coordinate.xy(-71.161144, 42.25932)
    )
  )

  ewkbTest("SRID=4326;LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)")(
    hex"0102000020E610000003000000E44A3D0B42CA51C06EC328081E21454027BF45274BCA51C0F67B629D2A214540957CEC2E50CA51C07099D36531214540",
    LineString(
      SRID(4326),
      Coordinate.xy(-71.160281, 42.258729),
      Coordinate.xy(-71.160837, 42.259113),
      Coordinate.xy(-71.161144, 42.25932)
    )
  )

  ewkbTest("POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239,-71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))")(
    hex"010300000001000000050000006285C7C15ECB51C0ED88FC0DF531454028A46F245FCB51C009075EA6F731454047DED1E65DCB51C0781C510EF83145404871A7835DCB51C0EBDAEE75F53145406285C7C15ECB51C0ED88FC0DF5314540",
    Polygon(
      None,
      Dimension.TwoD,
      LinearRing(
        Coordinate.xy(-71.1776585052917, 42.3902909739571),
        Coordinate.xy(-71.1776820268866, 42.3903701743239),
        Coordinate.xy(-71.1776063012595, 42.3903825660754),
        Coordinate.xy(-71.1775826583081, 42.3903033653531),
        Coordinate.xy(-71.1776585052917, 42.3902909739571)
      ).some,
      Nil
    )
  )

  ewkbTest("SRID=4269;POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239,-71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))")(
    hex"0103000020AD10000001000000050000006285C7C15ECB51C0ED88FC0DF531454028A46F245FCB51C009075EA6F731454047DED1E65DCB51C0781C510EF83145404871A7835DCB51C0EBDAEE75F53145406285C7C15ECB51C0ED88FC0DF5314540",
    Polygon(
      SRID(4269).some,
      Dimension.TwoD,
      LinearRing(
        Coordinate.xy(-71.1776585052917, 42.3902909739571),
        Coordinate.xy(-71.1776820268866, 42.3903701743239),
        Coordinate.xy(-71.1776063012595, 42.3903825660754),
        Coordinate.xy(-71.1775826583081, 42.3903033653531),
        Coordinate.xy(-71.1776585052917, 42.3902909739571)
      ).some,
      Nil
    )
  )

  ewkbTest("POLYGON((-15.66486 27.91996, -15.60610 27.91820, -15.60359 27.97169, -15.66586 27.97144,-15.66486 27.91996), (-15.65753 27.95894, -15.61610 27.95995, -15.61459 27.93157,-15.65477 27.93007,-15.65753 27.95894))")(
    hex"010300000002000000050000004DD6A88768542FC0CFA0A17F82EB3B4011363CBD52362FC0EC2FBB270FEB3B40A2629CBF09352FC0A9D903ADC0F83B40DB6D179AEB542FC0B806B64AB0F83B404DD6A88768542FC0CFA0A17F82EB3B40050000001B47ACC5A7502FC084D382177DF53B4096218E75713B2FC092CB7F48BFF53B40B4E55C8AAB3A2FC04AEF1B5F7BEE3B40C8CD70033E4F2FC0A0FD481119EE3B401B47ACC5A7502FC084D382177DF53B40",
    Polygon(
      None,
      Dimension.TwoD,
      LinearRing(
        Coordinate.xy(-15.66486, 27.91996),
        Coordinate.xy(-15.60610, 27.91820),
        Coordinate.xy(-15.60359, 27.97169),
        Coordinate.xy(-15.66586, 27.97144),
        Coordinate.xy(-15.66486, 27.91996)
      ).some,
      LinearRing(
        Coordinate.xy(-15.65753, 27.95894),
        Coordinate.xy(-15.61610, 27.95995),
        Coordinate.xy(-15.61459, 27.93157),
        Coordinate.xy(-15.65477, 27.93007),
        Coordinate.xy(-15.65753, 27.95894)
      ) :: Nil
    )
  )

  ewkbTest("MULTIPOINT (1 1,2 2,3 3)")(
    hex"01 04000000030000000101000000000000000000F03F000000000000F03F010100000000000000000000400000000000000040010100000000000000000008400000000000000840",
    MultiPoint(
      Point.xy(1, 1),
      Point.xy(2, 2),
      Point.xy(3, 3)
    )
  )

  ewkbTest("SRID=4326;MULTIPOINT (1 1,2 2,3 3)")(
    hex"0104000020E6100000030000000101000000000000000000F03F000000000000F03F010100000000000000000000400000000000000040010100000000000000000008400000000000000840",
    MultiPoint(
      SRID(4326),
      Point.xy(1, 1),
      Point.xy(2, 2),
      Point.xy(3, 3)
    )
  )

  ewkbTest("MULTILINESTRING((0 0 0,1 1 0,1 2 1),(2 3 1,3 2 1,5 4 1))")(
    hex"010500008002000000010200008003000000000000000000000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000000000000000000F03F0000000000000040000000000000F03F01020000800300000000000000000000400000000000000840000000000000F03F00000000000008400000000000000040000000000000F03F00000000000014400000000000001040000000000000F03F",
    MultiLineString(
      LineString(
        Coordinate.xyz(0, 0, 0),
        Coordinate.xyz(1, 1, 0),
        Coordinate.xyz(1, 2, 1)
      ),
      LineString(
        Coordinate.xyz(2, 3, 1),
        Coordinate.xyz(3, 2, 1),
        Coordinate.xyz(5, 4, 1)
      ),
    )
  )

  ewkbTest("MULTIPOLYGON(((0 0 0,4 0 0,4 4 0,0 4 0,0 0 0),(1 1 0,2 1 0,2 2 0,1 2 0,1 1 0)),((-1 -1 0,-1 -2 0,-2 -2 0,-2 -1 0,-1 -1 0)))")(
    hex
    MultiPolygon(
      Polygon(
        LinearRing(
          Coordinate.xyz(0, 0, 0),
          Coordinate.xyz(4, 0, 0),
          Coordinate.xyz(4, 4, 0),
          Coordinate.xyz(0, 4, 0),
          Coordinate.xyz(0, 0, 0)
        ),
        LinearRing(
          Coordinate.xyz(1, 1, 0),
          Coordinate.xyz(2, 1, 0),
          Coordinate.xyz(2, 2, 0),
          Coordinate.xyz(1, 2, 0),
          Coordinate.xyz(1, 1, 0)
        )
      ),
      Polygon(
        LinearRing(
          Coordinate.xyz(-1, -1, 0),
          Coordinate.xyz(-1, -2, 0),
          Coordinate.xyz(-2, -2, 0),
          Coordinate.xyz(-2, -1, 0),
          Coordinate.xyz(-1, -1, 0)
        )
      )
    )
  )

  ewkbTest("GEOMETRYCOLLECTIONM( POINTM(2 3 9), LINESTRINGM(2 3 4, 3 4 5) )")(
    hex"0107000040020000000101000040000000000000004000000000000008400000000000002240010200004002000000000000000000004000000000000008400000000000001040000000000000084000000000000010400000000000001440",
    GeometryCollection(
      Point.xym(2, 3, 9),
      LineString(
        Coordinate.xym(2, 3, 4),
        Coordinate.xym(3, 4, 5)
      )
    )
  )

  def ewkbTest(name: String)(expectedBytes: ByteVector, expected: Geometry) =
    test(name) {
      // encode
      assertEquals(ewkb.codecs.geometry.encode(expected).require.toHex, expectedBytes.toHex)

      // decode
      ewkb.codecs.geometry.decodeValue(expectedBytes.toBitVector).fold(
        err => fail(s"[EWKB] Failed to decode geometry: $err"),
        geometry => assertEquals(geometry, expected)
      )
    }
}